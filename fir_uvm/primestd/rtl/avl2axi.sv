`timescale 1ns/10ps
// insipred by myipp_v1_0_S00_AXIS generated by AMD's Vivado'create custom IP code
module avl2axi #
	(
		// Users to add parameters here
		parameter integer FACTOR = 2,
		// User parameters ends
		// Do not modify the parameters beyond this line

		// AXI4Stream source: Data Width
		parameter integer C_S_AXIS_RDATA_WIDTH	= 16
	)
	(
		// Avalon st tx port
		//! indicates if the connected Avalon-ST sink interface accepts data
		output reg DATA_OUTPUT_READY,
		//! the transaction is valid		
		input wire DATA_OUTPUT_VALID,
		//! signals a sink that a new packet will be sent		
		input wire DATA_OUTPUT_STARTOFPACKET,
		//! signals the end of a packet		
		input wire DATA_OUTPUT_ENDOFPACKET,
		//! transaction data		
		input wire [C_S_AXIS_RDATA_WIDTH-1:0] DATA_OUTPUT_DATA,	

		// AXI4Stream source: Clock
		input wire  S_AXIS_ACLK,
		// AXI4Stream source: Reset
		input wire  S_AXIS_ARESETN,
		// Ready to accept data out
		input wire  S_AXIS_RREADY,
		// Data out
		output reg [C_S_AXIS_RDATA_WIDTH-1:0] S_AXIS_RDATA,
		// Indicates boundary of last packet
		output reg  S_AXIS_RLAST,
		// Data is output valid
		output reg  S_AXIS_RVALID
	);
	// function called clogb2 that returns an integer which has the 
	// value of the ceiling of the log base 2.
	function integer clogb2 (input integer bit_depth);
	  begin
	    for(clogb2=0; bit_depth>0; clogb2=clogb2+1)
	      bit_depth = bit_depth >> 1;
	  end
	endfunction

	// Total number of input data.
	localparam NUMBER_OF_OUTPUT_WORDS  = 2000/FACTOR;
	// bit_num gives the minimum number of bits needed to address 'NUMBER_OF_OUTPUT_WORDS' size of FIFO.
	localparam bit_num  = clogb2(NUMBER_OF_OUTPUT_WORDS-1);
	// Define the states of state machine
	// The control state machine oversees the writing of input streaming data to the FIFO,
	// and outputs the streaming data from the FIFO
	parameter [1:0] IDLE = 1'b0,        // This is the initial/idle state 

	                WRITE_FIFO  = 1'b1; // In this state FIFO is written with the
	                                    // input stream data S_AXIS_RDATA 
	wire avl_output_ready;
	// State variable
	reg mst_exec_state;     
	// FIFO write enable
	wire fifo_wren;
	// start of frame for avalon st rx
	reg start_of_frame;
	// end of frame for avalong st rx
	reg end_of_frame;
	// FIFO full flag
	reg fifo_full_flag;
	// FIFO write pointer
	reg [bit_num-1:0] write_pointer;
	// sink has accepted all the streaming data and stored in FIFO
	reg writes_done;
	// FIFO read pointer
	reg [bit_num-1:0] read_pointer;
	// sink has emptied all the streaming data and from FIFO
	reg reads_done;
	// I/O Connections assignments

	assign DATA_OUTPUT_READY	= avl_output_ready;
	
	// Control state machine implementation
	always @(posedge S_AXIS_ACLK) 
	begin  
	  if (!S_AXIS_ARESETN) 
	  // Synchronous reset (active low)
	    begin
	      mst_exec_state <= IDLE;
	    end  
	  else
	    case (mst_exec_state)
	      IDLE: 
	        // The source starts accepting avl data when 
	        // DATA_OUTPUT_STARTOFPACKET is asserted to mark the
	        // beginning of data 
	          if (DATA_OUTPUT_STARTOFPACKET)
	            begin
	              mst_exec_state <= WRITE_FIFO;
	            end
	          else
	            begin
	              mst_exec_state <= IDLE;
	            end
	      WRITE_FIFO: 
	        // When the source has accepted all the streaming output data,
	        // the interface swiches functionality to a sourcing slave
	        if (DATA_OUTPUT_ENDOFPACKET)
	          begin
	            mst_exec_state <= IDLE;
	          end
	        else
	          begin
	            // The source accepts and stores tdata 
	            // into FIFO
	            mst_exec_state <= WRITE_FIFO;
	          end

	    endcase
	end
	// AXI Streaming Source 
	// 
	// The example design source is ready to send the S_AXIS_RDATA when
	// the FIFO is filled with NUMBER_OF_OUTPUT_WORDS number of output words.
	assign avl_output_ready = ((mst_exec_state == WRITE_FIFO) && (write_pointer <= NUMBER_OF_OUTPUT_WORDS-1));

	always@(posedge S_AXIS_ACLK)
	begin
	  if(!S_AXIS_ARESETN)
	    begin
	      write_pointer <= 0;
	      writes_done <= '0;
	    end  
	  else
	    if (write_pointer <= NUMBER_OF_OUTPUT_WORDS-1)
	      begin
	        if (fifo_wren)
	          begin
	            // write pointer is incremented after every write to the FIFO
	            // when FIFO write signal is enabled.
	            write_pointer <= write_pointer + 1;
	            writes_done <= '0;
				
	          end
	          if ((write_pointer == NUMBER_OF_OUTPUT_WORDS-1)|| DATA_OUTPUT_ENDOFPACKET)
	            begin
	              // reads_done is asserted when NUMBER_OF_OUTPUT_WORDS numbers of streaming data 
	              // has been written to the FIFO which is also marked by DATA_OUTPUT_ENDOFPACKET(kept for optional usage).
	              writes_done <= '1;
	            end
	      end  
	end

	// FIFO write enable generation
	assign fifo_wren = DATA_OUTPUT_VALID && avl_output_ready;

	// FIFO Implementation in FF's, infer FIFO in future
	reg  [C_S_AXIS_RDATA_WIDTH:0] stream_data_fifo [0 : NUMBER_OF_OUTPUT_WORDS-1];

	// Streaming input data is stored in FIFO
	always @( posedge S_AXIS_ACLK )
    begin
        if (fifo_wren)
            stream_data_fifo[write_pointer] <= {DATA_OUTPUT_ENDOFPACKET, DATA_OUTPUT_DATA};
	end		

	// Hook up axi-st tx signals
	//! data_input_ready indicates that the unit accepts transactions to read FIFO
	always@(posedge S_AXIS_ACLK)
	begin
	  if(!S_AXIS_ARESETN)
	    begin
	      read_pointer <= 0;
		  reads_done <= '0;
		  S_AXIS_RVALID <= '0;
	    end  
	  else
	    if (read_pointer <= NUMBER_OF_OUTPUT_WORDS-1)
	      begin
	        if (S_AXIS_RREADY)
	          begin
	            // read pointer is incremented after every read from the FIFO
	            // when S_AXIS_RREADY signal is enabled.
	            read_pointer <= read_pointer + 1;
	            reads_done <= '0;
				S_AXIS_RVALID <= '1;				
	          end
	          if ((read_pointer == NUMBER_OF_OUTPUT_WORDS-1) || stream_data_fifo[read_pointer][C_S_AXIS_RDATA_WIDTH]) // early end of data or all data
	            begin
	              // reads_done is asserted when NUMBER_OF_OUTPUT_WORDS numbers of streaming data 
	              // has been written to the FIFO which is also marked by S_AXIS_TLAST(kept for optional usage).
	              reads_done <= '1;
				  S_AXIS_RVALID <= '0;				  
	            end
	      end
	end

	// Data out
	assign S_AXIS_RDATA = stream_data_fifo[read_pointer][C_S_AXIS_RDATA_WIDTH-1:0];
	// Indicates boundary of last packet
	assign S_AXIS_RLAST = stream_data_fifo[read_pointer][C_S_AXIS_RDATA_WIDTH];

	endmodule